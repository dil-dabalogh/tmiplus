from __future__ import annotations
from typing import Dict, List, Optional, Tuple, Protocol
from tmiplus.core.models import Member, Initiative, PTORecord, Assignment


class DataAdapter(Protocol):
    # Members
    def list_members(self) -> List[Member]: ...
    def upsert_members(self, members: List[Member]) -> None: ...
    def delete_members(self, names: List[str]) -> None: ...

    # Initiatives
    def list_initiatives(self) -> List[Initiative]: ...
    def upsert_initiatives(self, initiatives: List[Initiative]) -> None: ...
    def delete_initiatives(self, names: List[str]) -> None: ...

    # PTO
    def list_pto(self) -> List[PTORecord]: ...
    def upsert_pto(self, pto: List[PTORecord]) -> None: ...
    def delete_pto(self, keys: List[Tuple[str, str]]) -> None:  # (member_name, week_start)
        ...

    # Assignments
    def list_assignments(self) -> List[Assignment]: ...
    def upsert_assignments(self, assignments: List[Assignment]) -> None: ...
    def delete_assignments(self, keys: List[Tuple[str, str]]) -> None:  # (member_name, week_start)
        ...

    # Helper lookups
    def member_by_name(self, name: str) -> Optional[Member]: ...
    def initiative_by_name(self, name: str) -> Optional[Initiative]: ...
